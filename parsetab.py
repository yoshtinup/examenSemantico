
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIVIDE EQ FOR GE GT ID INCREMENTO INT LBRACE LE LPAREN LT MINUS NE NUMBER PLUS PREPROCESSOR RBRACE RETURN RPAREN SEMICOLON TIMESprogram : function_definitionfunction_definition : INT ID LPAREN RPAREN LBRACE function_body RBRACEfunction_body : declarations statements\n                     | statementsdeclarations : declarations declaration\n                    | declaration\n                    | emptydeclaration : INT ID ASSIGN NUMBER SEMICOLON\n                   | INT ID SEMICOLONstatements : statements statement\n                  | statement\n                  | emptystatement : for_loop\n                 | assignment_statement\n                 | return_statementfor_loop : FOR LPAREN assignment_expression SEMICOLON condition SEMICOLON increment_expression RPAREN LBRACE statements RBRACEassignment_expression : ID ASSIGN expressionincrement_expression : ID INCREMENTO\n                            | assignment_expressionassignment_statement : ID ASSIGN expression SEMICOLONreturn_statement : RETURN expression SEMICOLONcondition : expression LT expression\n                 | expression LE expression\n                 | expression GT expression\n                 | expression GE expression\n                 | expression EQ expression\n                 | expression NE expressionexpression : term\n                  | expression PLUS term\n                  | expression MINUS termterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : ID\n              | NUMBERempty :'
    
_lr_action_items = {'INT':([0,7,11,13,14,25,35,52,],[3,8,8,-6,-7,-5,-9,-8,]),'$end':([1,2,23,],[0,-1,-2,]),'ID':([3,7,8,11,12,13,14,15,16,17,18,20,22,24,25,26,27,28,35,39,40,41,42,43,45,46,47,52,56,57,58,59,60,61,62,74,75,76,],[4,9,21,9,9,-6,-7,-11,-13,-14,-15,32,32,9,-5,-12,-10,38,-9,-21,32,32,32,32,-20,32,32,-8,65,32,32,32,32,32,32,9,9,-16,]),'LPAREN':([4,19,],[5,28,]),'RPAREN':([5,30,31,32,33,48,49,50,51,55,63,64,73,],[6,-28,-31,-34,-35,-29,-30,-32,-33,-17,-19,72,-18,]),'LBRACE':([6,72,],[7,74,]),'FOR':([7,11,12,13,14,15,16,17,18,24,25,26,27,35,39,45,52,74,75,76,],[19,19,19,-6,-7,-11,-13,-14,-15,19,-5,-12,-10,-9,-21,-20,-8,19,19,-16,]),'RETURN':([7,11,12,13,14,15,16,17,18,24,25,26,27,35,39,45,52,74,75,76,],[20,20,20,-6,-7,-11,-13,-14,-15,20,-5,-12,-10,-9,-21,-20,-8,20,20,-16,]),'RBRACE':([7,10,11,12,13,14,15,16,17,18,24,25,26,27,35,39,45,52,74,75,76,],[-36,23,-36,-4,-6,-7,-11,-13,-14,-15,-3,-5,-12,-10,-9,-21,-20,-8,-36,76,-16,]),'ASSIGN':([9,21,38,65,],[22,34,47,47,]),'NUMBER':([20,22,34,40,41,42,43,46,47,57,58,59,60,61,62,],[33,33,44,33,33,33,33,33,33,33,33,33,33,33,33,]),'SEMICOLON':([21,29,30,31,32,33,36,37,44,48,49,50,51,53,55,66,67,68,69,70,71,],[35,39,-28,-31,-34,-35,45,46,52,-29,-30,-32,-33,56,-17,-22,-23,-24,-25,-26,-27,]),'PLUS':([29,30,31,32,33,36,48,49,50,51,54,55,66,67,68,69,70,71,],[40,-28,-31,-34,-35,40,-29,-30,-32,-33,40,40,40,40,40,40,40,40,]),'MINUS':([29,30,31,32,33,36,48,49,50,51,54,55,66,67,68,69,70,71,],[41,-28,-31,-34,-35,41,-29,-30,-32,-33,41,41,41,41,41,41,41,41,]),'LT':([30,31,32,33,48,49,50,51,54,],[-28,-31,-34,-35,-29,-30,-32,-33,57,]),'LE':([30,31,32,33,48,49,50,51,54,],[-28,-31,-34,-35,-29,-30,-32,-33,58,]),'GT':([30,31,32,33,48,49,50,51,54,],[-28,-31,-34,-35,-29,-30,-32,-33,59,]),'GE':([30,31,32,33,48,49,50,51,54,],[-28,-31,-34,-35,-29,-30,-32,-33,60,]),'EQ':([30,31,32,33,48,49,50,51,54,],[-28,-31,-34,-35,-29,-30,-32,-33,61,]),'NE':([30,31,32,33,48,49,50,51,54,],[-28,-31,-34,-35,-29,-30,-32,-33,62,]),'TIMES':([30,31,32,33,48,49,50,51,],[42,-31,-34,-35,42,42,-32,-33,]),'DIVIDE':([30,31,32,33,48,49,50,51,],[43,-31,-34,-35,43,43,-32,-33,]),'INCREMENTO':([65,],[73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_definition':([0,],[2,]),'function_body':([7,],[10,]),'declarations':([7,],[11,]),'statements':([7,11,74,],[12,24,75,]),'declaration':([7,11,],[13,25,]),'empty':([7,11,74,],[14,26,26,]),'statement':([7,11,12,24,74,75,],[15,15,27,27,15,27,]),'for_loop':([7,11,12,24,74,75,],[16,16,16,16,16,16,]),'assignment_statement':([7,11,12,24,74,75,],[17,17,17,17,17,17,]),'return_statement':([7,11,12,24,74,75,],[18,18,18,18,18,18,]),'expression':([20,22,46,47,57,58,59,60,61,62,],[29,36,54,55,66,67,68,69,70,71,]),'term':([20,22,40,41,46,47,57,58,59,60,61,62,],[30,30,48,49,30,30,30,30,30,30,30,30,]),'factor':([20,22,40,41,42,43,46,47,57,58,59,60,61,62,],[31,31,31,31,50,51,31,31,31,31,31,31,31,31,]),'assignment_expression':([28,56,],[37,63,]),'condition':([46,],[53,]),'increment_expression':([56,],[64,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_definition','program',1,'p_program','myparser.py',7),
  ('function_definition -> INT ID LPAREN RPAREN LBRACE function_body RBRACE','function_definition',7,'p_function_definition','myparser.py',11),
  ('function_body -> declarations statements','function_body',2,'p_function_body','myparser.py',14),
  ('function_body -> statements','function_body',1,'p_function_body','myparser.py',15),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','myparser.py',18),
  ('declarations -> declaration','declarations',1,'p_declarations','myparser.py',19),
  ('declarations -> empty','declarations',1,'p_declarations','myparser.py',20),
  ('declaration -> INT ID ASSIGN NUMBER SEMICOLON','declaration',5,'p_declaration','myparser.py',23),
  ('declaration -> INT ID SEMICOLON','declaration',3,'p_declaration','myparser.py',24),
  ('statements -> statements statement','statements',2,'p_statements','myparser.py',29),
  ('statements -> statement','statements',1,'p_statements','myparser.py',30),
  ('statements -> empty','statements',1,'p_statements','myparser.py',31),
  ('statement -> for_loop','statement',1,'p_statement','myparser.py',34),
  ('statement -> assignment_statement','statement',1,'p_statement','myparser.py',35),
  ('statement -> return_statement','statement',1,'p_statement','myparser.py',36),
  ('for_loop -> FOR LPAREN assignment_expression SEMICOLON condition SEMICOLON increment_expression RPAREN LBRACE statements RBRACE','for_loop',11,'p_for_loop','myparser.py',39),
  ('assignment_expression -> ID ASSIGN expression','assignment_expression',3,'p_assignment_expression','myparser.py',42),
  ('increment_expression -> ID INCREMENTO','increment_expression',2,'p_increment_expression','myparser.py',45),
  ('increment_expression -> assignment_expression','increment_expression',1,'p_increment_expression','myparser.py',46),
  ('assignment_statement -> ID ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','myparser.py',49),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','myparser.py',53),
  ('condition -> expression LT expression','condition',3,'p_condition','myparser.py',56),
  ('condition -> expression LE expression','condition',3,'p_condition','myparser.py',57),
  ('condition -> expression GT expression','condition',3,'p_condition','myparser.py',58),
  ('condition -> expression GE expression','condition',3,'p_condition','myparser.py',59),
  ('condition -> expression EQ expression','condition',3,'p_condition','myparser.py',60),
  ('condition -> expression NE expression','condition',3,'p_condition','myparser.py',61),
  ('expression -> term','expression',1,'p_expression','myparser.py',64),
  ('expression -> expression PLUS term','expression',3,'p_expression','myparser.py',65),
  ('expression -> expression MINUS term','expression',3,'p_expression','myparser.py',66),
  ('term -> factor','term',1,'p_term','myparser.py',69),
  ('term -> term TIMES factor','term',3,'p_term','myparser.py',70),
  ('term -> term DIVIDE factor','term',3,'p_term','myparser.py',71),
  ('factor -> ID','factor',1,'p_factor','myparser.py',74),
  ('factor -> NUMBER','factor',1,'p_factor','myparser.py',75),
  ('empty -> <empty>','empty',0,'p_empty','myparser.py',81),
]
